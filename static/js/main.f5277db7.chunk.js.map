{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["rowColorScale","chroma","scale","colColorScale","operations","setMatrix","f","matrix","i","row","k","push","App","useMeasure","refDiv","width","height","size","Math","floor","useState","random","grid","setGrid","running","setRunning","runningRef","useRef","current","runSimulation","useCallback","g","newGrid","JSON","parse","stringify","forEach","col","neightbours","x","y","newI","newK","calculateNextMatrixState","setTimeout","ref","style","display","justifyContent","alignItems","padding","color","onClick","gridTemplateColumns","map","key","onDrag","backgroundColor","blend","undefined","border","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.f5277db7.chunk.js","sourcesContent":["import React, { useState, useCallback, useRef } from 'react';\nimport useMeasure from \"react-use-measure\";\nimport chroma from \"chroma-js\";\nimport { FaPlay, FaPause, FaRedo, FaTrash } from \"react-icons/fa\";\n\nimport './App.css';\n\n// Following this tut by Ben Awad\n// https://youtu.be/DvVt11mPuM0\n\nconst numRows = 50;\nconst numCols = 50;\n\nconst cellSize = 10;\nconst rowColorScale = chroma.scale(['1cddd4', 'd563a1']);\nconst colColorScale = chroma.scale(['1cddd4', '45abc3']);\n\nconst operations = [\n  [0, 1],\n  [0, -1],\n  [1, -1],\n  [1, 0],\n  [1, 1],\n  [-1, -1],\n  [-1, 0],\n  [-1, 1],\n]\n\nconst setMatrix = f => {\n  let matrix = [];\n  for (let i = 0; i < numRows; i++) {\n    let row = []\n    for (let k = 0; k < numCols; k++) {\n      row.push(f());\n    }\n    matrix.push(row);\n  }\nreturn matrix;\n}\n\n\nconst calculateNextMatrixState = (matrix) => {\n  const newGrid = JSON.parse(JSON.stringify(matrix));\n  matrix.forEach((row, i) => {\n    row.forEach((col, k) => {\n      let neightbours = 0;\n      operations.forEach(([x, y]) => {\n        const newI = (i + x + numRows) % numRows;\n        const newK = (k + y + numCols) % numCols;\n        if (newI >= 0 && newI < numRows && newK >= 0 && newK < numCols) {\n          neightbours += matrix[newI][newK]\n        }\n      });\n\n      if (neightbours < 2 || neightbours > 3) {\n        newGrid[i][k] = 0;\n      }\n      else if (matrix[i][k] === 0 && neightbours === 3) {\n        newGrid[i][k] = 1; \n      }\n\n    })\n  })\n  return newGrid;\n}\n\nfunction App() {\n  const [refDiv, { width, height }] = useMeasure();\n\n  const smallestSize = width < height ? width : height;\n  const size = smallestSize / numRows;\n  const actualNumCols = Math.floor(width / size);\n\n  const [grid, setGrid] = useState(() => setMatrix(() => Math.random() > 0.9 ? 1 : 0));\n  const [running, setRunning] = useState(false);\n\n  const runningRef = useRef(running);\n  runningRef.current = running;\n\n  const clear = () => {\n    setGrid(setMatrix(() => 0));\n  }\n\n  const initializeRandom = () => {\n    setGrid(setMatrix(() => Math.random() > 0.9 ? 1 : 0));\n  }\n\n\n  const runSimulation = useCallback(() => {\n    if (!runningRef.current) {\n      return;\n    };\n\n    setGrid(g => calculateNextMatrixState(g));\n\n    setTimeout(runSimulation, 200);\n\n  }, [])\n\n\n  return (\n    <div \n    ref={refDiv}\n    style={{\n      width: \"100%\",\n      height: \"100vh\",\n      display: \"flex\",\n      justifyContent: \"center\",\n      alignItems: \"center\",\n    }}>\n\n\n      <div\n        style={{\n          padding: \"20px\",\n          color: \"1cddd4\"\n        }}>\n        <h1>\n        <p>\n          {!running && \n          <FaPlay\n          color=\"d563a1\"\n          onClick={() => {\n            setRunning(!running);\n            runningRef.current = true;\n            runSimulation();\n          }}      \n        />}\n          {running && \n          <FaPause\n          color=\"d563a1\"\n          onClick={() => {\n            setRunning(!running);\n            runningRef.current = true;\n            runSimulation();\n          }}      \n        />}\n        </p>\n        <p>\n          <FaRedo \n            color=\"d563a1\"\n            onClick={initializeRandom} />\n        </p>\n        <p>\n          <FaTrash \n            color=\"d563a1\"\n            onClick={clear}/>\n        </p>  \n        </h1>\n      </div>\n\n{/* \n      <button\n        onClick={() => {\n          setRunning(!running);\n          runningRef.current = true;\n          runSimulation();\n        }}\n      >\n        {running ? \"stop\" : \"start\"}\n      </button>\n\n     \n\n      <button\n        onClick={initializeRandom}>\n        random\n      </button>\n      <button\n        onClick={clear}>\n        clear\n      </button> */}\n\n\n      <div \n        style={{\n          display: \"grid\",\n          gridTemplateColumns: `repeat(${numCols}, ${size}px)`\n            \n        }}>\n        {\n          grid.map((row, k) => \n            row.map((col, i) => \n            <div\n              key={`${i}=${k}`}\n              onClick={() => {\n                const newGrid = JSON.parse(JSON.stringify(grid));\n                newGrid[i][k] ^= 1;\n                setGrid(newGrid);\n\n              }}\n              onDrag={() => {\n                const newGrid = JSON.parse(JSON.stringify(grid));\n                newGrid[i][k] ^= 1;\n                setGrid(newGrid);\n\n              }}\n              style={{\n                width: size,\n                height: size,\n                backgroundColor: grid[i][k] ? chroma.blend(rowColorScale(i / numRows), colColorScale(k / numCols), 'lighten') : undefined,\n                border: \"solid 0px black\"\n              }} \n            />\n          ))\n        }\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}